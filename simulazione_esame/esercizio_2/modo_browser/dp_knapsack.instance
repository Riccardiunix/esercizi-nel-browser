---
name: knapsack
title: Problema dello zaino
description: problema dello zaino in versione classica
tags:
- programmazione dinamica
- sottoproblemi e ricorrenze

modes: ['free','with_checks']

instance:
  CapacityMax: 36
  labels: ['A','B','C','D','E','F','G','H','I','L','M','N']
  costs:     [ 15, 16, 17, 11, 13,  5,  7,  3,  1, 12,  9,  7]
  vals:   [ 50, 52, 54, 40, 45, 17, 18,  7,  8, 42, 30, 22]

pages:
  teoria:
    https://cms.di.univr.it/home/RO/explain/knapsack

tasks:
- 1:
    tot_points: 40
    pt_formato_OK: 0
    pt_feasibility_OK: 1
    pt_consistency_OK: 0
    goals: ['opt_sol','opt_val']
    request: "Tra i sottoinsiemi di oggetti di peso complessivo non eccedente $CapacityMax$= {CapacityMax} fornirne uno in cui sia massima la somma dei valori."
    init_answ_cell_msg: "#Inserisci la tua risposta in forma di lista di oggetti da prendere (esempio: ['C','F','A'])\nopt_sol{task_number}=[]\n#Specificare il valore della soluzione introdotta (un intero, la somma dei valori degli oggetti presi):\nopt_val{task_number}=-1"
    verif: {'TALight_problem_name':'RO_knapsack','KingArthurs':['TALight','embedded_in_notebook']}

- 2:
    tot_points: 40
    pt_formato_OK: 0
    pt_feasibility_OK: 1
    goals: ['opt_sol','opt_val']
    CapacityGen: 32
    request: "Tra i sottoinsiemi di oggetti di peso complessivo non eccedente <b>la capacità {CapacityGen}</b>, fornirne uno in cui sia massima la somma dei valori."
    init_answ_cell_msg_automatic: PLACEHOLDER_prompt
    #init_answ_cell_msg: "#Writing here would override the automatic prompt message'
    verif: {'TALight_problem_name':'RO_knapsack','KingArthurs':['TALight','embedded_in_notebook']}

- 3:
    tot_points: 40
    pt_formato_OK: 0
    pt_feasibility_OK: 1
    goals: ['opt_sol','opt_val']
    CapacityGen: 30
    request: "Tra i sottoinsiemi di oggetti di peso complessivo non eccedente <b>la capacità {CapacityGen}</b>, fornirne uno in cui sia massima la somma dei valori."
    init_answ_cell_msg_automatic: PLACEHOLDER_prompt
    verif: {'TALight_problem_name':'RO_knapsack','KingArthurs':['TALight','embedded_in_notebook']}

- 4:
    tot_points: 40
    pt_formato_OK: 0
    pt_feasibility_OK: 1
    goals: ['opt_sol','opt_val']
    CapacityGen: 28
    request: "Tra i sottoinsiemi di oggetti di peso complessivo non eccedente <b>la capacità {CapacityGen}</b>, fornirne uno in cui sia massima la somma dei valori."
    init_answ_cell_msg_automatic: PLACEHOLDER_prompt
    verif: {'TALight_problem_name':'RO_knapsack','KingArthurs':['TALight','embedded_in_notebook']}

- 5:
    tot_points: 40
    pt_formato_OK: 0
    pt_feasibility_OK: 1
    goals: ['opt_sol','opt_val']
    CapacityGen: 36
    forced_out: ['E']
    request: "Fornire una soluzione ottima se <b>{CapacityGen} è la capienza dello zaino</b> da non superarsi ma assumendo di <b>non poter prendere</b> nessuno degli elementi in {forced_out}."
    init_answ_cell_msg_automatic: PLACEHOLDER_prompt
    verif: {'TALight_problem_name':'RO_knapsack','KingArthurs':['TALight','embedded_in_notebook']}

- 6:
    tot_points: 40
    pt_formato_OK: 0
    pt_feasibility_OK: 1
    goals: ['opt_sol','opt_val']
    CapacityGen: 36
    forced_out: ['B','E']
    request: "Fornire una soluzione ottima se <b>{CapacityGen} è la capienza dello zaino</b> da non superarsi ma assumendo di <b>non poter prendere</b> nessuno degli elementi in {forced_out}."
    init_answ_cell_msg_automatic: PLACEHOLDER_prompt
    verif: {'TALight_problem_name':'RO_knapsack','KingArthurs':['TALight','embedded_in_notebook']}

- 7:
    tot_points: 40
    pt_formato_OK: 0
    pt_feasibility_OK: 1
    goals: ['opt_sol','opt_val']
    CapacityGen: 34
    forced_out: ['B','E','F']
    request: "Fornire una soluzione ottima se <b>{CapacityGen} è la capienza dello zaino</b> da non superarsi ma assumendo di <b>non poter prendere</b> nessuno degli elementi in {forced_out}."
    init_answ_cell_msg_automatic: PLACEHOLDER_prompt
    verif: {'TALight_problem_name':'RO_knapsack','KingArthurs':['TALight','embedded_in_notebook']}

- 8:
    tot_points: 40
    pt_formato_OK: 0
    pt_feasibility_OK: 1
    goals: ['opt_val']
    CapacityGen: 34
    forced_in: ['B','E']
    request: "Fornire una soluzione ottima se <b>{CapacityGen} è la capienza dello zaino</b> da non superarsi ma assumendo di <b>dover prendere</b> tutti gli elementi in {forced_in}."
    init_answ_cell_msg_automatic: PLACEHOLDER_prompt
    verif: {'TALight_problem_name':'RO_knapsack','KingArthurs':['TALight','embedded_in_notebook']}

- 9:
    tot_points: 40
    pt_formato_OK: 0
    pt_feasibility_OK: 1
    goals: ['opt_sol','opt_val']
    CapacityGen: 34
    forced_in: ['B','F']
    forced_out: ['E']
    request: "Fornire una soluzione ottima se <b>{CapacityGen} è la capienza dello zaino</b> da non superarsi ma assumendo di <b>dover prendere tutti</b> gli elementi in {forced_in} e <b>nessuno</b> di quelli in {forced_out}."
    init_answ_cell_msg_automatic: PLACEHOLDER_prompt
    verif: {'TALight_problem_name':'RO_knapsack','KingArthurs':['TALight','embedded_in_notebook']}

- 10:
    tot_points: 40
    pt_formato_OK: 0
    pt_feasibility_OK: 1
    goals: ['opt_sol']
    CapacityGen: 31
    forced_in: ['B','I']
    forced_out: ['F','E']
    request: "Fornire una soluzione ottima se <b>{CapacityGen} è la capienza dello zaino</b> da non superarsi ma assumendo di <b>dover prendere tutti</b> gli elementi in {forced_in} e <b>nessuno</b> di quelli in {forced_out}."
    init_answ_cell_msg_automatic: PLACEHOLDER_prompt
    verif: {'TALight_problem_name':'RO_knapsack','KingArthurs':['TALight','embedded_in_notebook']}


...
